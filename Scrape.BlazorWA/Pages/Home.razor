@page "/"



@using Infrastructuur.DTO
@using Newtonsoft.Json
@using Scrape.Model
@using Scrape.Data.Helpers
@using System.Diagnostics
@using System.Text

@using Infrastructuur.Mappers;

@inject HttpClient httpClient
@inject Data data;
@inject HTMLRequest request;

@inject NavigationManager navManager

<PageTitle>Scraper</PageTitle>

<h1>Vind een job:</h1>

<div>@SearchPattern.URL</div>

<div class="clearfix">
    @foreach (var str in CheckedDomains)
    {
        <div class="domain">@str</div>
    }
</div>



<div class="btn-group">
    <button type="button" class="btn btn-danger dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
        Action
    </button>
    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            
    @foreach (var row in data.GetDomains())
    {
            <div class="dropdown-item" @onclick="() => Check(row.Domain.Id)">                
                &nbsp;@row.Domain.Title
            </div>
    }

    </div>
</div>

<div class="row mt-5">
    @foreach (var vac in Vacancies)
    {
        <div class="col-3 mb-5">
            <div class="container">
                <div class="card" style="width: 18rem;">
                    <div class="card-body">
                        <h5 class="card-title"><strong>Id:</strong> @vac.Id</h5>
                        <p class="card-text"><strong>Description:</strong> @vac.Description.Substring(0,150) ...</p>
                        <a href="#" class="btn btn-primary">Read More</a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>



@code {

    private SearchPattern SearchPattern { get; set; } = new SearchPattern();

    private List<string> CheckedDomains { get; set; } = new List<string>();

    private List<Vacancy> Vacancies = new List<Vacancy>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //responsemessage
            var response = await httpClient.GetAsync("https://localhost:7138/api/scrape/Parser");
            if (response.IsSuccessStatusCode)
            {
                var data = JsonConvert.DeserializeObject<List<VacancyDescriptionDto>>(await response.Content.ReadAsStringAsync());
                Vacancies.AddRange(data.Select(x => VacancyMapper.MapToVacancy(x)));
            }
        }
        catch (Exception ex)
        {
            //scrapedData = "Error: " + ex.Message;
        }
        // ScrapedData = await httpClient.GetFromJsonAsync<string>("Parser") ?? "empty data";
        // set standard URL VDAB website search vacancies
        SearchPattern.URL = "https://www.vdab.be/vindeenjob/vacatures?sort=standaard";
        // await ScrapeWebsite("https://www.vdab.be/vindeenjob/vacatures?sort=standaard&jobdomein=JOBCAT10");
    }

    private string Page { get; set; } = "";

    public async Task ScrapeWebsite(string url)
    {
        HttpClient client = new HttpClient();
        Page = await client.GetStringAsync(url);
    }

    public async Task Check(int domainId)
    {         

        // loop through domains
        foreach (var row in data.GetDomains().Where(r => r.Domain.Id == domainId))
        {
            // if SearchPattern.URL has specific domain URLPattern
            if (SearchPattern.URL.Contains(row.Domain.URLPattern))
            {
                // replace that domain URLPattern with empty string
                SearchPattern.URL = SearchPattern.URL.Replace(row.Domain.URLPattern, "");
            }
            else
            {
                // add pattern url
                SearchPattern.URL += row.Domain.URLPattern;
                CheckedDomains.Add(row.Domain.Title);
            }
        }
    }
}
